# Aqui foi um desafio em tanto!
# O c√≥digo foi reescrito para usar comprehensions.

from funcoes2 import soma, multiplica, duplicados, impares, pares, primos

def ler_numeros(numeros=None):
    if numeros is None:
        numeros = []

    try:
        # Solicita um n√∫mero ao usu√°rio
        n = int(input("N√∫mero: "))

        # Caso o n√∫mero seja 0, finaliza a coleta de n√∫meros
        if n == 0:
            if len(numeros) < 2:
                # Se a lista tem menos de 2 n√∫meros, pergunta se o usu√°rio quer continuar
                if len(numeros) == 1:
                    confirmacao = input(f"Voc√™ tem certeza que deseja continuar com o n√∫mero √∫nico {numeros[0]}? (s/n): ").lower()
                    if confirmacao == 's':
                        return numeros  # Retorna a lista com um √∫nico n√∫mero
                    else:
                        print("Vamos continuar adicionando n√∫meros ent√£o.")
                        return ler_numeros(numeros)  # Permite que o usu√°rio adicione mais n√∫meros
                else:
                    print("‚ö†Ô∏è  Digite pelo menos UM n√∫mero antes de continuar.")
                return ler_numeros(numeros)  # Volta a pedir n√∫meros, pois n√£o tem 2 n√∫meros ainda.

            return numeros  # Retorna a lista quando a condi√ß√£o de pelo menos 2 n√∫meros for atendida

        # Se o n√∫mero n√£o for 0, adiciona o n√∫mero √† lista e continua pedindo
        return ler_numeros(numeros + [n])

    except ValueError:
        print("‚ùå  Por favor, digite um n√∫mero inteiro v√°lido.")
        return ler_numeros(numeros)  # Em caso de erro, pede novamente um n√∫mero


def main():

    print("""
    Bem Vindos ao programa de resultados.
    ------------------------------------
    By PedCruz.
    """)


    print("\nDigite n√∫meros inteiros (0 para continuar):")
    numeros = ler_numeros()

    print("\n--- N√∫meros escolhidos ---")
    print(f"‚úÖ Voc√™ escolheu: {numeros}")

    print("\n--- Resultados ---")
    print(f"üìå Soma dos n√∫meros: {soma(numeros)}")
    print(f"üìå Multiplica√ß√£o dos n√∫meros: {multiplica(numeros)}")
    print(f"üìå N√∫meros duplicados: {duplicados(numeros)}")
    print(f"üìå N√∫meros √≠mpares distintos: {impares(numeros)}")
    print(f"üìå N√∫meros pares distintos: {pares(numeros)}")
    print(f"üìå N√∫meros primos: {primos(numeros)}")
    print()

if __name__ == "__main__":
    main()
